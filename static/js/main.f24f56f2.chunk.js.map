{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"4NAceA,EAZF,SAAC,GAA2B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,GAC5B,OACE,sBAAKC,UAAU,oDAAf,UACE,qBAAKC,IAAI,kBAAkBC,IAAG,+BAA4BH,EAA5B,cAC9B,gCACE,6BAAKF,IACL,4BAAIC,WCeGK,EApBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAElB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAMP,GAChB,OACE,cAAC,EAAD,CAEAA,GAAIK,EAAOL,GAAIA,GACfF,KAAMO,EAAOL,GAAIF,KACjBC,MAAOM,EAAOL,GAAID,OAHbC,SCIFQ,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKT,UAAU,MAAf,SACE,uBACEA,UAAU,kCACVU,KAAK,SACLC,YAAY,kBACZC,SAAUH,OCCHI,EARA,SAACC,GACd,OACE,qBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,iBAAkBC,OAAQ,SAAnE,SACGJ,EAAMK,YCmDEC,G,wDA/Cb,aAAe,IAAD,8BACZ,gBAgBJC,eAAiB,SAACC,GAEhB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAjBxC,EAAKC,MAAQ,CACXtB,OAAQ,GACRI,YAAa,IAJH,E,gEASK,IAAD,OAClBmB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC5BF,MAAK,SAAAG,GAAK,OAAK,EAAKR,SAAS,CAACnB,OAAQ2B,S,+BAY/B,IAAD,OAEDC,EAAiBC,KAAKP,MAAMtB,OAAO8B,QAAO,SAAA9B,GAC9C,OAAOA,EAAOP,KAAKsC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAIrE,OAAiC,IAA7BF,KAAKP,MAAMtB,OAAOiC,OACb,yCAIL,sBAAKrC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,0BACA,cAAC,EAAD,CAAWS,aAAcwB,KAAKZ,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUjB,OAAQ4B,a,GAzCRM,cCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCEdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.f24f56f2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ( { name, email, id } ) => {\n  return (\n    <div className=\"tc bg-light-blue dib br3 pa3 ma2 grow bw2 shadow5\">\n      <img alt='robot directory' src = {`https://robohash.org/${id}?200x200`}/>\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\n  return (\n    <div>\n      {\n        robots.map((user, id) => {\n          return (\n            <Card\n            key={id}\n            id={robots[id].id}\n            name={robots[id].name}\n            email={robots[id].email}\n            />\n          );\n      })\n    }\n    </div>\n  );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--pink bg-lightest-blue'\n        type='search'\n        placeholder='search contacts'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflow: 'scroll', border: '5px solid pink', height: '500px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\n//import { robots } from './robots';\nimport Scroll from './Scroll'\nimport './App.css';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      robots: [],\n      searchfield: ''\n    }\n    //alert('constructor');\n  }\n\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n  .then(users =>  this.setState({robots: users})); //{});/\n\n//  alert('DidMount');\n}\n\nonSearchChange = (event) => {\n//  alert(event.target.value);\n  this.setState({ searchfield: event.target.value })\n\n//alert(event.target.value);\n}\n\nrender() {\n  //alert('render');\n  const filteredRobots = this.state.robots.filter(robots =>{\n    return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n\n})\n\nif( this.state.robots.length === 0) {\n  return <h1>Loading</h1>\n} else {\n\n  return (\n    <div className='tc'>\n      <h1 className='f1'>Contact List</h1>\n      <SearchBox searchChange={this.onSearchChange}/>\n      <Scroll>\n        <CardList robots={filteredRobots} />\n      </Scroll>\n    </div>\n  );\n }\n}\n}\nexport default App;\n\n/*\ncomponentDidMount() {\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n    return response.json();\n  })\n  .then(users => {\n  this.setState({robots: users})\n})\n//  alert('DidMount');\n}\n*/\n\n/*\nconst { robots,seachfield } = this.state;\n\nconst filteredRobots = robots.filter(robot => {\n  return robot.name.toLowerCase().includes(seachfield.toLowerCase());\n})\n*/\n\n\n/*\n      const filteredRobots = this.state.robots.filter(robots =>{\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase)\n\n  })\n*/\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\nimport App from './App'\nimport reportWebVitals from './reportWebVitals';\nimport \"tachyons\";\n//import { robots } from './robots'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}